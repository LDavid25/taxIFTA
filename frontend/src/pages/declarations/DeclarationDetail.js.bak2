import React, { useState, useEffect, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { format, parseISO, startOfMonth, endOfMonth, eachMonthOfInterval } from 'date-fns';
import { es } from 'date-fns/locale';
import { getQuarterlyReportDetails } from '../../services/quarterlyReportService';
import {
  Box,
  Button,
  Card,
  CardContent,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  CircularProgress,
  Tabs,
  Tab,
  useTheme,
  useMediaQuery,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Grid
} from '@mui/material';
import {
  ArrowBack as ArrowBackIcon,
  PictureAsPdf as PdfIcon,
  Description as ExcelIcon,
  TableChart as TableChartIcon,
  ArrowBackIos as PrevIcon,
  ArrowForwardIos as NextIcon
} from '@mui/icons-material';
import { getDeclarationById } from '../../services/declarationService';
import AlertMessage from '../../components/common/AlertMessage';
import LoadingScreen from '../../components/common/LoadingScreen';

// Helper functions
const stateCodeToName = (code) => {
  try {
    if (!code) return 'Unknown';
    
    // Manejar el caso especial 'TOTAL'
    // if (String(code).toUpperCase() === 'TOTAL') return 'TOTAL';
    
    const states = {
      'AL': 'Alabama', 'AK': 'Alaska', 'AZ': 'Arizona', 'AR': 'Arkansas', 'CA': 'California',
      'CO': 'Colorado', 'CT': 'Connecticut', 'DE': 'Delaware', 'FL': 'Florida', 'GA': 'Georgia',
      'HI': 'Hawaii', 'ID': 'Idaho', 'IL': 'Illinois', 'IN': 'Indiana', 'IA': 'Iowa',
      'KS': 'Kansas', 'KY': 'Kentucky', 'LA': 'Louisiana', 'ME': 'Maine', 'MD': 'Maryland',
      'MA': 'Massachusetts', 'MI': 'Michigan', 'MN': 'Minnesota', 'MS': 'Mississippi',
      'MO': 'Missouri', 'MT': 'Montana', 'NE': 'Nebraska', 'NV': 'Nevada', 'NH': 'New Hampshire',
      'NJ': 'New Jersey', 'NM': 'New Mexico', 'NY': 'New York', 'NC': 'North Carolina',
      'ND': 'North Dakota', 'OH': 'Ohio', 'OK': 'Oklahoma', 'OR': 'Oregon', 'PA': 'Pennsylvania',
      'RI': 'Rhode Island', 'SC': 'South Carolina', 'SD': 'South Dakota', 'TN': 'Tennessee',
      'TX': 'Texas', 'UT': 'Utah', 'VT': 'Vermont', 'VA': 'Virginia', 'WA': 'Washington',
      'WV': 'West Virginia', 'WI': 'Wisconsin', 'WY': 'Wyoming', 'DC': 'District of Columbia',
      'PR': 'Puerto Rico', 'GU': 'Guam', 'VI': 'Virgin Islands', 'MP': 'Northern Mariana Islands',
      'AS': 'American Samoa'
    };
    
    // Convertir a string y buscar directamente
    const codeStr = String(code);
    return states[codeStr] || codeStr;
  } catch (error) {
    console.error('Error en stateCodeToName:', error);
    return 'Error';
  }
};

const getStatusColor = (status) => {
  if (!status) return 'default';
  
  // Usar un mapeo directo en lugar de switch con toLowerCase
  const colorMap = {
    'approved': 'success',
    'rejected': 'error',
    'pending': 'warning'
  };
  
  // Convertir a string y buscar en el mapa
  const statusStr = String(status);
  return colorMap[statusStr] || 'default';
};

const getStatusText = (status) => {
  if (!status) return 'Desconocido';
  
  const statusMap = {
    'approved': 'Aprobado',
    'rejected': 'Rechazado',
    'pending': 'Pendiente'
  };
  
  // Convertir a string y buscar en el mapa
  const statusStr = String(status);
  return statusMap[statusStr] || status;
};

const formatDate = (dateString) => {
  if (!dateString) return '';
  try {
    return format(parseISO(dateString), 'PP', { locale: es });
  } catch (error) {
    console.error('Error formatting date:', error);
    return dateString;
  }
};

const formatNumber = (num) => {
  return new Intl.NumberFormat('en-US').format(num);
};

const calculateMPG = (miles, gallons) => {
  if (!gallons || gallons === 0) return 0;
  return miles / gallons;
};

// Main component
const DeclarationDetail = () => {
  const { companyId, quarter, year } = useParams();
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));

  // State
  const [loading, setLoading] = useState(true);
  const [reportData, setReportData] = useState({
    reports: [],
    monthly_breakdown: [],
    state_totals: [],
    individual_reports: []
  });
  const [companyInfo, setCompanyInfo] = useState(null);
  const [activeTab, setActiveTab] = useState(0);
  const [alert, setAlert] = useState({ open: false, message: '', severity: 'info' });

  
  // Filter states
  const [filters, setFilters] = useState({
    vehicle: 'all',
    year: new Date().getFullYear(),
    startQuarter: 1,
    endQuarter: 4
  });
  
  // Fetch report data
  useEffect(() => {
    const fetchReportData = async () => {
      if (!companyId || !quarter || !year) return;
      
      setLoading(true);
      try {
        const response = await getQuarterlyReportDetails(companyId, quarter, year);
        console.log('Report data:', response);
        
        // Set report data
        const reportData = {
          reports: response.data?.reports || [],
          monthly_breakdown: response.data?.monthly_breakdown || [],
          state_totals: response.data?.state_totals || [],
          individual_reports: response.data?.individual_reports || []
        };
        
        console.log('Datos de la API - individual_reports:', reportData.individual_reports);
        console.log('Total de informes individuales recibidos:', reportData.individual_reports.length);
        
        // Verificar la estructura de un informe individual
        if (reportData.individual_reports.length > 0) {
          console.log('Estructura del primer informe individual:', reportData.individual_reports[0]);
        }
        
        setReportData(reportData);
        
        // Calculate totals
        const totalMiles = reportData.state_totals.reduce((sum, state) => 
          sum + (parseFloat(state.total_miles) || 0), 0);
        const totalGallons = reportData.state_totals.reduce((sum, state) => 
          sum + (parseFloat(state.total_gallons) || 0), 0);
        const avgMPG = calculateMPG(totalMiles, totalGallons);
        
        // Get date range from individual reports
        const sortedReports = [...(reportData.individual_reports || [])].sort((a, b) => 
          new Date(a.created_at) - new Date(b.created_at)
        );
        
        // Set company info if available
        if (response.data?.company_name) {
          setCompanyInfo({
            id: companyId,
            name: response.data.company_name
          });
        }

      } catch (error) {
        console.error('Error loading report data:', error);
        setAlert({
          open: true,
          message: error.message || 'Error al cargar los datos del reporte',
          severity: 'error'
        });
      } finally {
        setLoading(false);
      }
    };

    fetchReportData();
  }, [companyId, quarter, year]);

  // Process state summary from API data
  const stateSummary = useMemo(() => {
    if (!reportData.state_totals || reportData.state_totals.length === 0) return [];
    
    // Calculate totals
    const totalMiles = reportData.state_totals.reduce((sum, state) => 
      sum + (parseFloat(state.total_miles) || 0), 0);
      
    const totalGallons = reportData.state_totals.reduce((sum, state) => 
      sum + (parseFloat(state.total_gallons) || 0), 0);
    
    // Create summary array from state_totals
    const summary = reportData.state_totals.map(state => ({
      state: state.state_code,
      miles: parseFloat(state.total_miles) || 0,
      gallons: parseFloat(state.total_gallons) || 0,
      mpg: calculateMPG(parseFloat(state.total_miles) || 0, parseFloat(state.total_gallons) || 0).toFixed(2),
      percentage: totalMiles > 0 ? ((parseFloat(state.total_miles) || 0) / totalMiles) * 100 : 0
    }));

    // Add total row
    if (summary.length > 0) {
      summary.push({
        state: 'TOTAL',
        isTotal: true,
        miles: totalMiles,
        gallons: totalGallons,
        mpg: calculateMPG(totalMiles, totalGallons).toFixed(2),
        percentage: 100
      });
    }

    return summary;
  }, [reportData.state_totals]);

  // Month names for display
  const monthNames = [
    'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
    'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
  ];

  // Process monthly data from API
  const monthlyData = useMemo(() => {
    if (!reportData.monthly_breakdown?.length) return [];
    
    // Group by month and state
    const monthsMap = new Map();
    
    reportData.monthly_breakdown.forEach(item => {
      const date = new Date(item.report_date);
      const year = date.getFullYear();
      const month = date.getMonth();
      const monthKey = `${year}-${String(month + 1).padStart(2, '0')}`;
      const stateCode = item.state_code;
      
      if (!monthsMap.has(monthKey)) {
        monthsMap.set(monthKey, {
          month,
          year,
          states: {}
        });
      }

      // Add state data for this month
      if (!monthsMap.get(monthKey).states[stateCode]) {
        monthsMap.get(monthKey).states[stateCode] = {
          miles: 0,
          gallons: 0
        };
      }
      
      // Sum up the values
      const monthStates = monthsMap.get(monthKey).states[stateCode];
      monthStates.miles += parseFloat(item.total_miles) || 0;
      monthStates.gallons += parseFloat(item.total_gallons) || 0;
    });

    // Convert to array, sort by date, and add month name
    return Array.from(monthsMap.values())
      .sort((a, b) => {
        if (a.year !== b.year) return a.year - b.year;
        return a.month - b.month;
      })
      .map(monthData => ({
        ...monthData,
        monthName: monthNames[monthData.month]
      }));
  }, [reportData.monthly_breakdown]);

  // Process data for the vehicle/state monthly table
  const vehicleStateTableData = useMemo(() => {
    console.log('Procesando individual_reports:', reportData.individual_reports);
    if (!reportData.individual_reports?.length) {
      console.log('No hay informes individuales para procesar');
      return { vehicles: [], months: [], generalTotal: { miles: 0, gallons: 0, mpg: 0 } };
    }

    // Get all unique months from reports
    const monthsMap = new Map();
    const vehiclesMap = new Map();
    let generalTotalMiles = 0;
    let generalTotalGallons = 0;

    // Process each report
    console.log('Procesando informes individuales. Total:', reportData.individual_reports.length);
    
    reportData.individual_reports.forEach((report, index) => {
      console.log(`Procesando informe ${index + 1}:`, report);
      
      const vehiclePlate = report.vehicle_plate || 'SIN PLACA';
      const month = report.report_month - 1; // Convert to 0-based month
      const year = report.report_year;
      const monthKey = `${year}-${String(month + 1).padStart(2, '0')}`;
      
      console.log(`Vehículo: ${vehiclePlate}, Mes: ${month + 1}, Año: ${year}, Clave de mes: ${monthKey}`);
      
      // Track unique months
      if (!monthsMap.has(monthKey)) {
        monthsMap.set(monthKey, {
          month,
          monthName: monthNames[month],
          year
        });
      }
      
      // Verificar si hay datos de estados
      if (!report.state_data || !Array.isArray(report.state_data)) {
        console.log(`  No hay datos de estados para el informe ${index + 1}`);
        return; // Saltar este reporte si no tiene datos de estados
      }

      // Initialize vehicle if not exists
      if (!vehiclesMap.has(vehiclePlate)) {
        vehiclesMap.set(vehiclePlate, {
          plate: vehiclePlate,
          states: new Map(),
          totalMiles: 0,
          totalGallons: 0,
          mpg: 0
        });
      }

      const vehicle = vehiclesMap.get(vehiclePlate);
      
      // Procesar cada estado en el reporte
      console.log(`  Estados en el informe ${index + 1}:`, report.state_data);
      
      report.state_data.forEach((state, stateIndex) => {
        const stateCode = state.state_code;
        console.log(`  Procesando estado ${stateIndex + 1}: ${stateCode}, Millas: ${state.miles}, Galones: ${state.gallons}`);
        
        // Initialize state if not exists
        if (!vehicle.states.has(stateCode)) {
          vehicle.states.set(stateCode, {
            code: stateCode,
            months: new Map(),
            totalMiles: 0,
            totalGallons: 0,
            mpg: 0
          });
        }
        
        const stateData = vehicle.states.get(stateCode);
        
        // Initialize month data if not exists
        if (!stateData.months.has(monthKey)) {
          stateData.months.set(monthKey, { miles: 0, gallons: 0 });
        }
        
        // Add values
        const monthData = stateData.months.get(monthKey);
        const miles = parseFloat(state.miles) || 0;
        const gallons = parseFloat(state.gallons) || 0;
        
        monthData.miles += miles;
        monthData.gallons += gallons;
        
        // Update state totals
        stateData.totalMiles += miles;
        stateData.totalGallons += gallons;
        stateData.mpg = stateData.totalGallons > 0 ? 
          (stateData.totalMiles / stateData.totalGallons).toFixed(2) : '0.00';
        
        // Update vehicle totals
        vehicle.totalMiles += miles;
        vehicle.totalGallons += gallons;
        
        // Update general totals
        generalTotalMiles += miles;
        generalTotalGallons += gallons;
      });
      
      // Calculate vehicle MPG
      vehicle.mpg = vehicle.totalGallons > 0 ? 
        (vehicle.totalMiles / vehicle.totalGallons).toFixed(2) : '0.00';
    });
    
    // Ordenar meses cronológicamente
    const sortedMonths = Array.from(monthsMap.values()).sort((a, b) => {
      if (a.year !== b.year) return a.year - b.year;
      return a.month - b.month;
    });
    
    console.log('Meses únicos encontrados:', sortedMonths);
    
    // Convertir el mapa de vehículos a un array y ordenar por placa
    const vehicles = Array.from(vehiclesMap.values()).sort((a, b) => 
      a.plate.localeCompare(b.plate)
    );
    
    console.log('Vehículos encontrados:', vehicles.map(v => v.plate));
    
    // Convertir los mapas de estados a arrays y ordenar por código de estado
    vehicles.forEach(vehicle => {
      vehicle.states = Array.from(vehicle.states.values()).sort((a, b) => 
        a.code.localeCompare(b.code)
      );
      
      // Calcular MPG para cada vehículo
      vehicle.mpg = vehicle.totalGallons > 0 ? 
        (vehicle.totalMiles / vehicle.totalGallons).toFixed(2) : '0.00';
      
      console.log(`Estados para el vehículo ${vehicle.plate}:`, vehicle.states.map(s => s.code));
    });
    
    // Calcular MPG general
    const generalMPG = generalTotalGallons > 0 ? 
      (generalTotalMiles / generalTotalGallons).toFixed(2) : '0.00';
    
    const result = {
      vehicles,
      months: sortedMonths,
      generalTotal: {
        miles: generalTotalMiles,
        gallons: generalTotalGallons,
        mpg: generalMPG
      }
    };
    
    console.log('Datos procesados para la tabla:', {
      totalVehicles: vehicles.length,
      totalMonths: sortedMonths.length,
      generalTotal: result.generalTotal,
      sampleVehicle: vehicles.length > 0 ? {
        plate: vehicles[0].plate,
        states: vehicles[0].states.map(s => s.code),
        totalMiles: vehicles[0].totalMiles,
        totalGallons: vehicles[0].totalGallons,
        mpg: vehicles[0].mpg
      } : 'No hay vehículos'
    });
    
    return result;
  }, [reportData.individual_reports]);

  // State colors for chips (se mantienen para otros usos)
  const stateColors = {
    'AL': '#9c27b0', 'AK': '#3f51b5', 'AZ': '#2196f3', 'AR': '#00bcd4', 'CA': '#4caf50',
    'CO': '#8bc34a', 'CT': '#ffeb3b', 'DE': '#ffc107', 'FL': '#ff9800', 'GA': '#ff5722',
    'HI': '#f44336', 'ID': '#e91e63', 'IL': '#9c27b0', 'IN': '#3f51b5', 'IA': '#2196f3',
    'KS': '#00bcd4', 'KY': '#4caf50', 'LA': '#8bc34a', 'ME': '#ffeb3b', 'MD': '#ffc107',
    'MA': '#ff9800', 'MI': '#ff5722', 'MN': '#f44336', 'MS': '#e91e63', 'MO': '#9c27b0',
    'MT': '#3f51b5', 'NE': '#2196f3', 'NV': '#00bcd4', 'NH': '#4caf50', 'NJ': '#8bc34a',
    'NM': '#ffeb3b', 'NY': '#ffc107', 'NC': '#ff9800', 'ND': '#ff5722', 'OH': '#f44336',
    'OK': '#e91e63', 'OR': '#9c27b0', 'PA': '#3f51b5', 'RI': '#2196f3', 'SC': '#00bcd4',
    'SD': '#4caf50', 'TN': '#8bc34a', 'TX': '#ffeb3b', 'UT': '#ffc107', 'VT': '#ff9800',
    'VA': '#ff5722', 'WA': '#f44336', 'WV': '#e91e63', 'WI': '#9c27b0', 'WY': '#3f51b5',
    'DC': '#2196f3', 'PR': '#00bcd4', 'GU': '#4caf50', 'VI': '#8bc34a', 'MP': '#ffeb3b',
    'AS': '#ffc107'
  };

  // Handle tab change
  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };

  // Handle filter changes
  const handleFilterChange = (field, value) => {
    setFilters(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // Calculate report summary from reportData
  const reportSummary = useMemo(() => {
    const totalMiles = reportData.state_totals?.reduce((sum, state) => 
      sum + (parseFloat(state?.total_miles) || 0), 0) || 0;
      
    const totalGallons = reportData.state_totals?.reduce((sum, state) => 
      sum + (parseFloat(state?.total_gallons) || 0), 0) || 0;
      
    const avgMPG = totalGallons > 0 ? (totalMiles / totalGallons).toFixed(2) : 0;

    // Get date range for the report
    const reportDates = (reportData.individual_reports || [])
      .map(r => r?.report_date ? new Date(r.report_date) : null)
      .filter(Boolean);
    
    const startDate = reportDates.length > 0 
      ? format(Math.min(...reportDates), 'PP', { locale: es })
      : 'N/A';
      
    const endDate = reportDates.length > 0 
      ? format(Math.max(...reportDates), 'PP', { locale: es })
      : 'N/A';

    return {
      total_miles: totalMiles,
      total_gallons: totalGallons,
      avg_mpg: avgMPG,
      start_date: startDate,
      end_date: endDate,
      report_count: reportData.individual_reports?.length || 0
    };
  }, [reportData]);
  
  // Set initial loading state
  useEffect(() => {
    if (reportData.individual_reports.length > 0) {
      setLoading(false);
    }
  }, [reportData]);

  // Estilos comunes para la tabla
  const tableStyles = {
    container: {
      mt: 3,
      maxHeight: '70vh',
      width: '100%',
      overflow: 'auto',
      border: '1px solid #e0e0e0',
      borderRadius: '4px',
      boxShadow: '0 2px 4px rgba(0,0,0,0.05)',
      '&::-webkit-scrollbar': {
        width: '8px',
        height: '8px'
      },
      '&::-webkit-scrollbar-thumb': {
        backgroundColor: '#888',
        borderRadius: '4px'
      },
      '&::-webkit-scrollbar-track': {
        backgroundColor: '#f1f1f1'
      }
    },
    table: {
      minWidth: 'max-content',
    },
    stickyColumn: {
      position: 'sticky',
      left: 0,
      backgroundColor: '#fff',
      zIndex: 5,
    },
    stickyState: {
      position: 'sticky',
      left: '200px',
      backgroundColor: '#fff',
      zIndex: 5,
    },
    rowHover: {
      '&:hover': {
        backgroundColor: '#f8f9fa',
      },
    },
    totalRow: {
      backgroundColor: '#e8f4fd',
      fontWeight: 600,
    },
  };

  const styles = {
      container: {
        width: '100%',
        overflowX: 'auto',
        border: '1px solid #e0e0e0',
        borderRadius: '4px',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
        maxHeight: 'calc(100vh - 200px)',
      },
      headerCell: {
        padding: '12px',
        textAlign: 'left',
        borderBottom: '1px solid #e0e0e0',
        borderRight: '1px solid #e0e0e0',
        backgroundColor: '#f5f7fa',
        fontWeight: 600,
        position: 'sticky',
        top: 0,
        zIndex: 10,
      },
      cell: {
        padding: '8px 12px',
        borderBottom: '1px solid #e0e0e0',
        borderRight: '1px solid #e0e0e0',
      },
      numberCell: {
        textAlign: 'right',
        fontFamily: 'Roboto Mono, monospace',
      },
      stickyColumn: {
        position: 'sticky',
        left: 0,
        backgroundColor: '#fff',
        zIndex: 5,
      },
      stickyState: {
        position: 'sticky',
        left: '200px',
        backgroundColor: '#fff',
        zIndex: 5,
      },
      rowHover: {
        '&:hover': {
          backgroundColor: '#f8f9fa',
        },
      },
      totalRow: {
        backgroundColor: '#e8f4fd',
        fontWeight: 600,
      },
    };

    return (
      <TableContainer component={Paper} sx={styles.container}>
        <Table size="small" stickyHeader>
          <TableHead>
            <TableRow>
              <TableCell 
                rowSpan={2} 
                sx={{ 
                  ...styles.headerCell, 
                  ...styles.stickyColumn,
                  zIndex: 15,
                  minWidth: '180px'
                }}
              >
                VEHÍCULO (PLACA)
              </TableCell>
              <TableCell 
                rowSpan={2} 
                sx={{ 
                  ...styles.headerCell,
                  ...styles.stickyState,
                  zIndex: 15,
                  minWidth: '150px'
                }}
              >
                ESTADO
              </TableCell>
              {months.map((month, index) => (
                <TableCell 
                  key={`month-${index}`}
                  colSpan={2}
                  align="center"
                  sx={{
                    ...styles.headerCell,
                    minWidth: '180px',
                    whiteSpace: 'nowrap'
                  }}
                >
                  {format(new Date(month.year, month.month), 'MMM yyyy', { locale: es })}
                </TableCell>
              ))}
              <TableCell 
                colSpan={2}
                align="center"
                sx={{
                  ...styles.headerCell,
                  minWidth: '180px',
                  whiteSpace: 'nowrap',
                  backgroundColor: '#e8f4fd',
                  borderRight: '2px solid #e0e0e0'
                }}
              >
                TOTAL
              </TableCell>
            </TableRow>
            <TableRow>
              {[...months, {key: 'total'}].map((month, idx) => (
                <React.Fragment key={`subheader-${idx}`}>
                  <TableCell 
                    sx={{
                      ...styles.headerCell,
                      minWidth: '90px',
                      top: '40px',
                      backgroundColor: month.key === 'total' ? '#e8f4fd' : '#f5f7fa',
                      borderRight: month.key === 'total' ? '2px solid #e0e0e0' : '1px solid #e0e0e0',
                    }}
                  >
                    Millas
                  </TableCell>
                  <TableCell 
                    sx={{
                      ...styles.headerCell,
                      minWidth: '90px',
                      top: '40px',
                      backgroundColor: month.key === 'total' ? '#e8f4fd' : '#f5f7fa',
                      borderRight: month.key === 'total' ? '2px solid #e0e0e0' : '1px solid #e0e0e0',
                    }}
                  >
                    Galones
                  </TableCell>
                </React.Fragment>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {vehicleStateTableData.vehicles.map((vehicle, vIdx) => {
              const sortedStates = [...vehicle.states].sort((a, b) => 
                (a.state?.name || '').localeCompare(b.state?.name || '')
              );
              
              return sortedStates.map((state, sIdx) => {
                const isFirstState = sIdx === 0;
                
                return (
                  <TableRow 
                    key={`${vIdx}-${sIdx}`} 
                    sx={{ 
                      '&:hover': styles.rowHover,
                      '& td': { 
                        backgroundColor: sIdx % 2 === 0 ? '#ffffff' : '#f9f9f9',
                        padding: '8px 12px'
                      }
                    }}
                  >
                    {isFirstState && (
                      <TableCell 
                        rowSpan={sortedStates.length}
                        sx={{
                          ...styles.cell,
                          ...styles.stickyColumn,
                          backgroundColor: sIdx % 2 === 0 ? '#ffffff' : '#f9f9f9',
                          fontWeight: 600,
                          textAlign: 'center',
                          verticalAlign: 'middle',
                          zIndex: 2,
                        }}
                      >
                        {vehicle.vehicle.plate}
                      </TableCell>
                    )}
                    <TableCell 
                      sx={{
                        ...styles.cell,
                        ...styles.stickyState,
                        backgroundColor: sIdx % 2 === 0 ? '#ffffff' : '#f9f9f9',
                        zIndex: 2,
                      }}
                    >
                      {state.state?.name || 'N/A'}
                    </TableCell>
                    
                    {months.map((month, mIdx) => (
                      <React.Fragment key={`${vIdx}-${sIdx}-${mIdx}`}>
                        <TableCell 
                          sx={{
                            ...styles.cell,
                            ...styles.numberCell,
                            backgroundColor: sIdx % 2 === 0 ? '#ffffff' : '#f9f9f9',
                          }}
                        >
                          {formatNumber(state.months?.[mIdx]?.miles, 0)}
                        </TableCell>
                        <TableCell 
                          sx={{
                            ...styles.cell,
                            ...styles.numberCell,
                            backgroundColor: sIdx % 2 === 0 ? '#ffffff' : '#f9f9f9',
                          }}
                        >
                          {formatNumber(state.months?.[mIdx]?.gallons, 2)}
                        </TableCell>
                      </React.Fragment>
                    ))}
                    
                    {/* Total columns */}
                    <TableCell 
                      sx={{
                        ...styles.cell,
                        ...styles.numberCell,
                        backgroundColor: sIdx % 2 === 0 ? '#e8f4fd' : '#d8e9f9',
                        fontWeight: 600,
                        borderRight: '2px solid #e0e0e0',
                      }}
                    >
                      {formatNumber(state.totalMiles, 0)}
                    </TableCell>
                    <TableCell 
                      sx={{
                        ...styles.cell,
                        ...styles.numberCell,
                        backgroundColor: sIdx % 2 === 0 ? '#e8f4fd' : '#d8e9f9',
                        fontWeight: 600,
                        borderRight: '2px solid #e0e0e0',
                      }}
                    >
                      {formatNumber(state.totalGallons, 2)}
                    </TableCell>
                  </TableRow>
                );
              });
            })}
            
            {/* Vehicle Totals Row */}
            {vehicleStateTableData.vehicles.length > 1 && (
              <TableRow sx={styles.totalRow}>
                <TableCell 
                  colSpan={2}
                  sx={{
                    ...styles.cell,
                    textAlign: 'right',
                    paddingRight: '16px !important',
                    fontWeight: 600,
                  }}
                >
                  TOTAL GENERAL
                </TableCell>
                {months.map((month, mIdx) => (
                  <React.Fragment key={`total-${mIdx}`}>
                    <TableCell 
                      sx={{
                        ...styles.cell,
                        ...styles.numberCell,
                        fontWeight: 600,
                      }}
                    >
                      {formatNumber(vehicleStateTableData.generalTotal.months?.[mIdx]?.miles, 0)}
                    </TableCell>
                    <TableCell 
                      sx={{
                        ...styles.cell,
                        ...styles.numberCell,
                        fontWeight: 600,
                      }}
                    >
                      {formatNumber(vehicleStateTableData.generalTotal.months?.[mIdx]?.gallons, 2)}
                    </TableCell>
                  </React.Fragment>
                ))}
                <TableCell 
                  sx={{
                    ...styles.cell,
                    ...styles.numberCell,
                    fontWeight: 700,
                    backgroundColor: '#d4e6f7',
                    borderRight: '2px solid #e0e0e0',
                  }}
                >
                  {formatNumber(vehicleStateTableData.generalTotal.miles, 0)}
                </TableCell>
                <TableCell 
                  sx={{
                    ...styles.cell,
                    ...styles.numberCell,
                    fontWeight: 700,
                    backgroundColor: '#d4e6f7',
                    borderRight: '2px solid #e0e0e0',
                  }}
                >
                  {formatNumber(vehicleStateTableData.generalTotal.gallons, 2)}
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </TableContainer>
    );
  };

  // Table header component
  const TableHeader = () => {
    return (
      <TableHead>
        <TableRow>
          <TableCell rowSpan={2} sx={{ minWidth: '200px', position: 'sticky', left: 0, zIndex: 10, backgroundColor: '#fff' }}>Vehículo</TableCell>
          <TableCell rowSpan={2} sx={{ minWidth: '120px', position: 'sticky', left: '200px', zIndex: 10, backgroundColor: '#fff' }}>Estado</TableCell>
          {vehicleStateTableData.months.map(month => (
            <TableCell key={month} colSpan={2} align="center" sx={{ fontWeight: 'bold' }}>
              {format(parseISO(month), 'MMM yyyy', { locale: es })}
            </TableCell>
          ))}
          <TableCell colSpan={2} align="center" sx={{ fontWeight: 'bold' }}>Total</TableCell>
        </TableRow>
        <TableRow>
          {[...Array(vehicleStateTableData.months.length * 2 + 2)].map((_, i) => (
            <TableCell 
              key={i} 
              align={i % 2 === 0 ? 'right' : 'center'}
              sx={{ 
                fontWeight: 'bold',
                backgroundColor: i % 2 === 0 ? '#f5f5f5' : '#fff',
                borderRight: '1px solid #e0e0e0'
              }}
            >
              {i % 2 === 0 ? 'Millas' : 'MPG'}
            </TableCell>
          ))}
        </TableRow>
      </TableHead>
    );
  };

  return (
    <TableContainer component={Paper} sx={tableContainerStyles}>
      <Table sx={tableStyles}>
        <TableHeader />
        <TableBody>
        {sortedVehicles.map((vehicle, vIdx) => {
          const sortedStates = vehicle.states;
          let isFirstState = true;

          return sortedStates.map((state, sIdx) => {
            return (
              <TableRow key={`${vIdx}-${sIdx}`} sx={{ '& td': { backgroundColor: sIdx % 2 === 0 ? '#ffffff' : '#f9f9f9' } }}>
                {/* Vehicle Plate */}
                {isFirstState && (
                  <TableCell
                    rowSpan={sortedStates.length}
                    sx={{
                      backgroundColor: sIdx % 2 === 0 ? '#ffffff' : '#f9f9f9',
                      '&:hover': {
                        backgroundColor: '#f0f7ff'
                      },
                      zIndex: 2,
                      fontWeight: 600,
                      textAlign: 'center',
                      verticalAlign: 'middle',
                      position: 'sticky',
                      left: 0,
                      minWidth: '150px',
                      maxWidth: '150px',
                      borderRight: '1px solid #e0e0e0',
                      padding: '6px 8px !important',
                      backgroundColor: 'inherit !important',
                    }}
                  >
                    {vehicle.plate}
                  </TableCell>
                    )}
                    
                    {/* State Code */}
                    <TableCell 
                      className="state-cell"
                      sx={{
                        ...tableStyles.stickyColumn,
                        left: '150px',
                        zIndex: 2,
                        fontStyle: 'italic',
                        textAlign: 'left',
                        padding: '6px 8px !important',
                        backgroundColor: 'inherit !important',
                      }}
                    >
                      {stateCodeToName(state.code) || state.code}
                    </TableCell>
                    
                    {/* Monthly data for this state */}
                    {vehicleStateTableData.months.map(month => {
                      const monthKey = `${month.year}-${String(month.month + 1).padStart(2, '0')}`;
                      const monthData = state.months.get(monthKey) || { miles: 0, gallons: 0 };
                      const mpg = monthData.gallons > 0 ? (monthData.miles / monthData.gallons).toFixed(2) : '0.00';
                      
                      console.log(`    Datos para ${vehicle.plate} - ${state.code} - ${monthKey}:`, monthData);
                      
                      return (
                        <React.Fragment key={`${vIdx}-${sIdx}-${monthKey}`}>
                          <TableCell 
                            sx={{
                              backgroundColor: sIdx % 2 === 0 ? '#ffffff' : '#f9f9f9',
                              color: monthData.miles > 0 ? 'inherit' : '#999',
                              fontStyle: monthData.miles > 0 ? 'normal' : 'italic'
                            }}
                            title={`${formatCellNumber(monthData.miles)} millas`}
                          >
                            {monthData.miles > 0 ? formatCellNumber(monthData.miles) : '-'}
                          </TableCell>
                          <TableCell 
                            sx={{
                              backgroundColor: sIdx % 2 === 0 ? '#ffffff' : '#f9f9f9',
                              color: monthData.gallons > 0 ? 'inherit' : '#999',
                              fontStyle: monthData.gallons > 0 ? 'normal' : 'italic',
                              borderRight: '1px solid #e0e0e0'
                            }}
                            title={`${formatCellNumber(monthData.gallons)} galones`}
                          >
                            {monthData.gallons > 0 ? formatCellNumber(monthData.gallons) : '-'}
                          </TableCell>
                        </React.Fragment>
                      );
                    })}
                    
                    {/* State totals */}
                    <TableCell 
                      sx={{
                        fontWeight: 'bold',
                        backgroundColor: sIdx % 2 === 0 ? '#f0f0f0' : '#e6e6e6',
                        borderRight: '1px solid #e0e0e0',
                        color: state.totalMiles > 0 ? 'inherit' : '#999',
                        fontStyle: state.totalMiles > 0 ? 'normal' : 'italic',
                        textAlign: 'right',
                        padding: '6px 8px !important'
                      }}
                      title={`Total millas: ${formatCellNumber(state.totalMiles)}`}
                    >
                      {state.totalMiles > 0 ? formatCellNumber(state.totalMiles) : '-'}
                    </TableCell>
                    <TableCell 
                      sx={{
                        fontWeight: 'bold',
                        backgroundColor: sIdx % 2 === 0 ? '#f0f0f0' : '#e6e6e6',
                        borderRight: '2px solid #e0e0e0',
                        color: state.totalGallons > 0 ? 'inherit' : '#999',
                        fontStyle: state.totalGallons > 0 ? 'normal' : 'italic',
                        textAlign: 'right',
                        padding: '6px 8px !important'
                      }}
                      title={`Total galones: ${formatCellNumber(state.totalGallons)}`}
                    >
                      {state.totalGallons > 0 ? formatCellNumber(state.totalGallons) : '-'}
                    </TableCell>
                    
                    {/* MPG for this state */}
                    <TableCell 
                      sx={{
                        fontWeight: 'bold',
                        backgroundColor: sIdx % 2 === 0 ? '#f0f0f0' : '#e6e6e6',
                        position: 'sticky',
                        right: 0,
                        zIndex: 1,
                        textAlign: 'center',
                        color: state.mpg > 0 ? 'inherit' : '#999',
                        fontStyle: state.mpg > 0 ? 'normal' : 'italic'
                      }}
                      title={`MPG: ${state.mpg}`}
                    >
                      {state.mpg > 0 ? state.mpg : '-'}
                    </TableCell>
                  </TableRow>
                );
                
                isFirstState = false;
              });
              
              // Add vehicle total row
              if (vehicle.states.length > 1) {
                vehicleRows.push(
                  <TableRow 
                    key={`${vIdx}-total`} 
                    sx={{
                      '& td': {
                        backgroundColor: '#e8f5e9 !important',
                        fontWeight: 'bold',
                        borderBottom: '2px solid #e0e0e0',
                        position: 'sticky',
                        bottom: 0,
                        zIndex: 3
                      },
                      '&:hover td': {
                        backgroundColor: '#dcedc8 !important'
                      }
                    }}
                  >
                    <TableCell 
                      colSpan={2}
                      sx={{
                        textAlign: 'right',
                        paddingRight: '16px !important',
                        borderRight: '1px solid #e0e0e0',
                        left: 0,
                        zIndex: 4,
                        fontSize: '0.9rem'
                      }}
                    >
                      TOTAL {vehicle.plate}:
                    </TableCell>
                    
                    {/* Monthly totals for this vehicle */}
                    {vehicleStateTableData.months.map(month => {
                      const monthKey = `${month.year}-${String(month.month + 1).padStart(2, '0')}`;
                      
                      // Calculate total miles and gallons for this month across all states
                      const monthTotal = vehicle.states.reduce(
                        (acc, state) => {
                          const monthData = state.months.get(monthKey) || { miles: 0, gallons: 0 };
                          return {
                            miles: acc.miles + (monthData.miles || 0),
                            gallons: acc.gallons + (monthData.gallons || 0)
                          };
                        },
                        { miles: 0, gallons: 0 }
                      );
                      
                      return (
                        <React.Fragment key={`${vIdx}-total-${monthKey}`}>
                          <TableCell 
                            sx={{
                              fontFamily: '"Roboto Mono", monospace',
                              textAlign: 'right',
                              padding: '6px 8px !important',
                              color: monthTotal.miles > 0 ? 'inherit' : '#999',
                              fontStyle: monthTotal.miles > 0 ? 'normal' : 'italic',
                              borderRight: '1px solid #e0e0e0 !important'
                            }}
                            title={`${formatNumber(monthTotal.miles)} millas`}
                          >
                            {monthTotal.miles > 0 ? formatNumber(monthTotal.miles) : '-'}
                          </TableCell>
                          <TableCell 
                            sx={{
                              fontFamily: '"Roboto Mono", monospace',
                              textAlign: 'right',
                              padding: '6px 8px !important',
                              color: monthTotal.gallons > 0 ? 'inherit' : '#999',
                              fontStyle: monthTotal.gallons > 0 ? 'normal' : 'italic',
                              borderRight: '1px solid #e0e0e0 !important'
                            }}
                            title={`${formatNumber(monthTotal.gallons)} galones`}
                          >
                            {monthTotal.gallons > 0 ? formatNumber(monthTotal.gallons) : '-'}
                          </TableCell>
                        </React.Fragment>
                      );
                    })}
                    
                    {/* Vehicle totals */}
                    <TableCell 
                      align="right"
                      sx={{
                        fontFamily: 'monospace',
                        fontWeight: 'bold',
                        borderRight: '1px solid #e0e0e0',
                        backgroundColor: '#e8f5e9',
                        padding: '4px 8px',
                        whiteSpace: 'nowrap'
                      }}
                    >
                      {formatNumber(vehicle.totalMiles)}
                    </TableCell>
                    <TableCell 
                      align="right"
                      sx={{
                        fontFamily: 'monospace',
                        fontWeight: 'bold',
                        borderRight: '1px solid #e0e0e0',
                        backgroundColor: '#e8f5e9',
                        padding: '4px 8px',
                        whiteSpace: 'nowrap'
                      }}
                    >
                      {formatNumber(vehicle.totalGallons)}
                    </TableCell>
                    
                    {/* Vehicle MPG */}
                    <TableCell 
                      sx={{
                        fontFamily: '"Roboto Mono", monospace',
                        textAlign: 'right',
                        padding: '6px 8px !important',
                        color: vehicle.mpg > 0 ? 'inherit' : '#999',
                        fontStyle: vehicle.mpg > 0 ? 'normal' : 'italic',
                        borderRight: '1px solid #e0e0e0 !important',
                        position: 'sticky',
                        right: 0,
                        zIndex: 1
                      }}
                      title={`MPG total: ${vehicle.mpg}`}
                    >
                      {vehicle.mpg > 0 ? vehicle.mpg : '-'}
                    </TableCell>
                  </TableRow>
                );
              }
              
              return vehicleRows;
            })}
            
            {/* General Total Row */}
            {vehicleStateTableData.vehicles.length > 0 && (
              <TableRow sx={{ backgroundColor: '#e8f5e9' }}>
                <TableCell 
                  colSpan={2}
                  sx={{
                    fontWeight: 'bold',
                    borderRight: '1px solid #e0e0e0',
                    position: 'sticky',
                    left: 0,
                    zIndex: 2,
                    backgroundColor: '#e8f5e9',
                    padding: '8px',
                    whiteSpace: 'nowrap'
                  }}
                >
                  TOTAL GENERAL
                </TableCell>
                
                {/* Monthly general totals */}
                {vehicleStateTableData.months.map(month => {
                  const monthKey = `${month.year}-${String(month.month + 1).padStart(2, '0')}`;
                  
                  // Calculate total miles and gallons for this month across all vehicles and states
                  const monthTotal = vehicleStateTableData.vehicles.reduce(
                    (acc, vehicle) => {
                      const vehicleMonthTotal = vehicle.states.reduce(
                        (vAcc, state) => {
                          const monthData = state.months.get(monthKey) || { miles: 0, gallons: 0 };
                          return {
                            miles: vAcc.miles + (monthData.miles || 0),
                            gallons: vAcc.gallons + (monthData.gallons || 0)
                          };
                        },
                        { miles: 0, gallons: 0 }
                      );
                      
                      return {
                        miles: acc.miles + vehicleMonthTotal.miles,
                        gallons: acc.gallons + vehicleMonthTotal.gallons
                      };
                    },
                    { miles: 0, gallons: 0 }
                  );
                  
                  return (
                    <React.Fragment key={`total-${monthKey}`}>
                      <TableCell 
                        align="right"
                        sx={{
                          fontFamily: 'monospace',
                          fontWeight: 'bold',
                          borderRight: '1px solid #e0e0e0',
                          backgroundColor: '#e8f5e9',
                          padding: '8px',
                          whiteSpace: 'nowrap'
                        }}
                      >
                        {formatNumber(monthTotal.miles)}
                      </TableCell>
                      <TableCell 
                        align="right"
                        sx={{
                          fontFamily: 'monospace',
                          fontWeight: 'bold',
                          borderRight: '1px solid #e0e0e0',
                          backgroundColor: '#e8f5e9',
                          padding: '8px',
                          whiteSpace: 'nowrap'
                        }}
                      >
                        {formatNumber(monthTotal.gallons)}
                      </TableCell>
                    </React.Fragment>
                  );
                })}
                
                {/* General totals */}
                <TableCell 
                  align="right"
                  sx={{
                    fontFamily: 'monospace',
                    fontWeight: 'bold',
                    borderRight: '1px solid #e0e0e0',
                    backgroundColor: '#c8e6c9',
                    padding: '8px',
                    whiteSpace: 'nowrap'
                  }}
                >
                  {formatNumber(vehicleStateTableData.generalTotal.miles)}
                </TableCell>
                <TableCell 
                  align="right"
                  sx={{
                    fontFamily: 'monospace',
                    fontWeight: 'bold',
                    borderRight: '1px solid #e0e0e0',
                    backgroundColor: '#c8e6c9',
                    padding: '8px',
                    whiteSpace: 'nowrap'
                  }}
                >
                  {formatNumber(vehicleStateTableData.generalTotal.gallons)}
                </TableCell>
                
                {/* General MPG */}
                <TableCell 
                  align="center"
                  sx={{
                    fontFamily: 'monospace',
                    fontWeight: 'bold',
                    backgroundColor: '#c8e6c9',
                    padding: '8px',
                    whiteSpace: 'nowrap',
                    position: 'sticky',
                    right: 0,
                    zIndex: 1
                  }}
                >
                  {vehicleStateTableData.generalTotal.mpg}
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </TableContainer>
    );
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="50vh">
        <CircularProgress />
      </Box>
    );
  }

  // Table header component
  const TableHeader = () => {
    return (
      <TableHead>
        <TableRow>
          <TableCell rowSpan={2} sx={{ minWidth: '200px', position: 'sticky', left: 0, zIndex: 10, backgroundColor: '#fff' }}>Vehículo</TableCell>
          <TableCell rowSpan={2} sx={{ minWidth: '120px', position: 'sticky', left: '200px', zIndex: 10, backgroundColor: '#fff' }}>Estado</TableCell>
          {vehicleStateTableData.months.map(month => (
            <TableCell key={month} colSpan={2} align="center" sx={{ fontWeight: 'bold' }}>
              {format(parseISO(month), 'MMM yyyy', { locale: es })}
            </TableCell>
          ))}
          <TableCell colSpan={2} align="center" sx={{ fontWeight: 'bold' }}>Total</TableCell>
        </TableRow>
        <TableRow>
          {[...Array(vehicleStateTableData.months.length * 2 + 2)].map((_, i) => (
            <TableCell 
              key={i} 
              align={i % 2 === 0 ? 'right' : 'center'}
              sx={{ 
                fontWeight: 'bold',
                backgroundColor: i % 2 === 0 ? '#f5f5f5' : '#fff',
                borderRight: '1px solid #e0e0e0'
              }}
            >
              {i % 2 === 0 ? 'Millas' : 'MPG'}
            </TableCell>
          ))}
        </TableRow>
      </TableHead>
    );
  };

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Typography variant="h5" gutterBottom>
            DECLARACIÓN IFTA - Q{quarter} {year}
          </Typography>
          
          {/* Filters */}
          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', mt: 2 }}>
            <FormControl size="small" sx={{ minWidth: 180 }}>
              <InputLabel>Vehículo</InputLabel>
              <Select
                value={filters.vehicle}
                label="Vehículo"
                onChange={(e) => handleFilterChange('vehicle', e.target.value)}
              >
                <MenuItem value="all">Todos</MenuItem>
                {Array.from(new Set(reportData.individual_reports
                  .map(r => r.vehicle_plate)
                  .filter(Boolean))).map(plate => (
                  <MenuItem key={plate} value={plate}>{plate}</MenuItem>
                ))}
              </Select>
            </FormControl>
            
            <FormControl size="small" sx={{ minWidth: 120 }}>
              <InputLabel>Año</InputLabel>
              <Select
                value={filters.year}
                label="Año"
                onChange={(e) => handleFilterChange('year', e.target.value)}
              >
                {[2023, 2024, 2025].map(year => (
                  <MenuItem key={year} value={year}>{year}</MenuItem>
                ))}
              </Select>
            </FormControl>
            
            <FormControl size="small" sx={{ minWidth: 120 }}>
              <InputLabel>Q Inicio</InputLabel>
              <Select
                value={filters.startQuarter}
                label="Q Inicio"
                onChange={(e) => handleFilterChange('startQuarter', e.target.value)}
              >
                {[1, 2, 3, 4].map(q => (
                  <MenuItem key={`start-${q}`} value={q}>Q{q}</MenuItem>
                ))}
              </Select>
            </FormControl>
            
            <FormControl size="small" sx={{ minWidth: 120 }}>
              <InputLabel>Q Fin</InputLabel>
              <Select
                value={filters.endQuarter}
                label="Q Fin"
                onChange={(e) => handleFilterChange('endQuarter', e.target.value)}
              >
                {[1, 2, 3, 4].filter(q => q >= filters.startQuarter).map(q => (
                  <MenuItem key={`end-${q}`} value={q}>Q{q}</MenuItem>
                ))}
              </Select>
            </FormControl>
            
            <Button variant="contained" color="primary">
              Aplicar
            </Button>
          </Box>
        </CardContent>
      </Card>

      {/* State Summary Table */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>RESUMEN POR ESTADO</Typography>
          <TableContainer component={Paper}>
            <Table size="small">
              <TableHead>
                <TableRow>
                  <TableCell>ESTADO</TableCell>
                  <TableCell align="right">MILLAS TOTALES</TableCell>
                  <TableCell align="right">GALONES TOTALES</TableCell>
                  <TableCell align="right">MPG PROMEDIO</TableCell>
                  <TableCell align="right">% TOTAL</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {stateSummary.map((state, index) => (
                  <TableRow 
                    key={state.state} 
                    sx={state.isTotal ? { backgroundColor: 'action.hover', '& td': { fontWeight: 'bold' } } : {}}
                  >
                    <TableCell>{state.isTotal ? 'TOTAL' : stateCodeToName(state.state)}</TableCell>
                    <TableCell align="right">{formatNumber(state.miles)}</TableCell>
                    <TableCell align="right">{formatNumber(state.gallons)}</TableCell>
                    <TableCell align="right">{state.mpg}</TableCell>
                    <TableCell align="right">{state.percentage.toFixed(1)}%</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </CardContent>
      </Card>

      {/* Monthly Detail Table */}
      <Card sx={{ mb: 3 }}>
        <Box sx={{ mt: 4 }}>
          <Typography variant="h6" gutterBottom>
            DETALLE POR MES Y ESTADO
          </Typography>
          <Box sx={{ mt: 2, mb: 2 }}>
            <Typography variant="body2" color="textSecondary" paragraph>
              Esta tabla muestra el desglose detallado de millas y galones por vehículo, estado y mes.
            </Typography>
          </Box>
          {renderVehicleStateTable()}
        </Box>
      </Card>
      
      {/* Summary Card */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>RESUMEN GENERAL</Typography>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
            <Typography>
              • Total Millas: <strong>{reportSummary ? formatNumber(reportSummary.total_miles) : '0'}</strong>
              {' '}• Total Galones: <strong>{reportSummary ? formatNumber(reportSummary.total_gallons) : '0'}</strong>
              {' '}• MPG Promedio: <strong>{reportSummary ? reportSummary.avg_mpg : '0.00'}</strong>
            </Typography>
            <Typography>
              • Período: {reportSummary ? reportSummary.start_date : 'N/A'} - {reportSummary ? reportSummary.end_date : 'N/A'}
            </Typography>
            <Typography>
              • Total de reportes: <strong>{reportSummary ? reportSummary.report_count : '0'}</strong>
            </Typography>
          </Box>
        </CardContent>
      </Card>

      {/* Tab Content */}
      {activeTab === 0 && (
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              Resumen por Estado
            </Typography>
            <TableContainer component={Paper}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Estado</TableCell>
                    <TableCell align="right">Millas</TableCell>
                    <TableCell align="right">Galones</TableCell>
                    <TableCell align="right">MPG</TableCell>
                    <TableCell align="right">% del Total</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {stateSummary.map((state, index) => (
                    <TableRow key={`${state.state}-${index}`}>
                      <TableCell>{stateCodeToName(state.state)}</TableCell>
                      <TableCell align="right">{formatNumber(state.miles)}</TableCell>
                      <TableCell align="right">{formatNumber(state.gallons)}</TableCell>
                      <TableCell align="right">{state.mpg}</TableCell>
                      <TableCell align="right">{state.percentage.toFixed(2)}%</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </CardContent>
        </Card>
      )}

      {activeTab === 1 && (
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              Detalle por Vehículo
            </Typography>
            <TableContainer component={Paper}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Placa</TableCell>
                    <TableCell>Fecha</TableCell>
                    <TableCell align="right">Millas</TableCell>
                    <TableCell align="right">Galones</TableCell>
                    <TableCell>Estados</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {reportData.individual_reports.map((report, index) => (
                    <TableRow key={index} hover>
                      <TableCell><strong>{report.vehicle_plate || 'N/A'}</strong></TableCell>
                      <TableCell>{report.report_date ? formatDate(report.report_date) : 'N/A'}</TableCell>
                      <TableCell align="right">{formatNumber(report.total_miles)}</TableCell>
                      <TableCell align="right">{formatNumber(report.total_gallons)}</TableCell>
                      <TableCell>
                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                          {report.state_data?.map((state, i) => (
                            <Chip
                              key={i}
                              label={state.state_code}
                              size="small"
                              sx={{
                                bgcolor: stateColors[state.state_code] || '#e0e0e0',
                                color: 'white',
                                fontWeight: 'bold'
                              }}
                            />
                          ))}
                        </Box>
                      </TableCell>
                    </TableRow>
                  ))}
                  <TableRow sx={{ '&:last-child td': { borderBottom: 0 }, backgroundColor: 'action.hover' }}>
                    <TableCell><strong>Total</strong></TableCell>
                    <TableCell align="right"><strong>{formatNumber(reportSummary.total_miles)}</strong></TableCell>
                    <TableCell align="right"><strong>{formatNumber(reportSummary.total_gallons)}</strong></TableCell>
                    <TableCell align="right">
                      <strong>{calculateMPG(reportSummary.total_miles, reportSummary.total_gallons)}</strong>
                    </TableCell>
                    <TableCell>
                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                        {stateSummary?.map((state, i) => (
                          <Chip
                            key={i}
                            label={state.state}
                            size="small"
                            sx={{
                              bgcolor: stateColors[state.state] || '#e0e0e0',
                              color: 'white',
                              fontWeight: 'bold'
                            }}
                          />
                        ))}
                      </Box>
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </TableContainer>
          </CardContent>
        </Card>
      )}

      {/* Action Buttons */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>
        <Button
          variant="outlined"
          startIcon={<PrevIcon />}
          onClick={() => {}}
        >
          Anterior Período
        </Button>
        
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button
            variant="contained"
            color="primary"
            startIcon={<PdfIcon />}
          >
            Exportar a PDF
          </Button>
          <Button
            variant="contained"
            color="success"
            startIcon={<ExcelIcon />}
          >
            Exportar a Excel
          </Button>
        </Box>
        
        <Button
          variant="outlined"
          endIcon={<NextIcon />}
          onClick={() => {}}
        >
          Siguiente Período
        </Button>
      </Box>
    </Box>
  );
};

export default DeclarationDetail;